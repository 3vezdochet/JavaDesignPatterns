Сушествует два способа хранения данных внутри коллекций:
    - хранение в массивах
    - хранение в узлах/цепочках

Хранение в массивах:
    При достижении границы массива - создается массив больше, в него копируются старые значения.
    При удалении - элементы справа от удаляемого копируются на ячейку влево.

    Отдельно храниться кол-во элементов в массиве.

Хранение в цепочках:
    Элементы храняться уже не в массиве, а в некотором классе-оболочке - узле.
    Узел имеет ссылку на следующий (или следующий и предыдущий) элементы.

    Отдельно храниться ссылка на первый (или первый и последний) элемент, для отшагивания по узлам
    до нужной позиции.
    Также может хранить отдельно кол-во узлов.

    При вставке происходит путем создания нового узла и привязывание к нему ссылок предыдущего (или следующего и предыдущего)
    элемента.
    При удалении - ссылки предыдщуего и следущего узла связываются друг с другом. Как бы формируя связь в обход элемента
    который будет удален.


ИТЕРАТОР - один из самых распространенных поведенческих паттернов.
Суть итератора - проход коллекции по заданным правилам:
    - Будь то перебор каждого элемента последвательно
    - Через элемент например
    - Обход графа ДФС/БФС и тд.

    Всё это просто частные реализации итератора для обхода структуры.
    В зависимости от структуры итераторов может быть несколько. Например для графа
    можно реализовать итератор обход в ширину и в длину.

В данном случае мы будем говорить о ВНЕШНЕМ ИТЕРАТОРЕ (почти всегда когда говориться итератор имеется ввиду именно это) -
позволяет пользователю перебирать коллекцию по элементам, обязательно проверяя наличие элемента.

В Java итератор представлен интерфейсом Iterator<E>
ВАЖНО!! В основном итераторы используются для неизменяемого прохода по коллекции.

Далее - MyArray
